/*
 * Created on 10 Jul 2016 ( Time 20:21:13 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.freeware.foodrestaurantsapp.serviceimpl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.freeware.foodrestaurantsapp.beanmapper.CustomerServiceMapper;
import com.freeware.foodrestaurantsapp.entity.CustomerEntity;
import com.freeware.foodrestaurantsapp.model.Customer;
import com.freeware.foodrestaurantsapp.repository.CustomerJpaRepository;
import com.freeware.foodrestaurantsapp.service.CustomerService;

/**
 * Implementation of CustomerService
 */
@Component
@Transactional
public class CustomerServiceImpl implements CustomerService {

	@Resource
	private CustomerJpaRepository customerJpaRepository;

	@Resource
	private CustomerServiceMapper customerServiceMapper;
	
	@Override
	public Customer findById(Integer customerId) {
		CustomerEntity customerEntity = customerJpaRepository.findOne(customerId);
		return customerServiceMapper.mapCustomerEntityToCustomer(customerEntity);
	}

	@Override
	public List<Customer> findAll() {
		Iterable<CustomerEntity> entities = customerJpaRepository.findAll();
		List<Customer> beans = new ArrayList<Customer>();
		for(CustomerEntity customerEntity : entities) {
			beans.add(customerServiceMapper.mapCustomerEntityToCustomer(customerEntity));
		}
		return beans;
	}

	@Override
	public Customer save(Customer customer) {
		return update(customer) ;
	}

	@Override
	public Customer create(Customer customer) {
		CustomerEntity customerEntity = customerJpaRepository.findOne(customer.getCustomerId());
		if( customerEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		customerEntity = new CustomerEntity();
		customerServiceMapper.mapCustomerToCustomerEntity(customer, customerEntity);
		CustomerEntity customerEntitySaved = customerJpaRepository.save(customerEntity);
		return customerServiceMapper.mapCustomerEntityToCustomer(customerEntitySaved);
	}

	@Override
	public Customer update(Customer customer) {
		CustomerEntity customerEntity = customerJpaRepository.findOne(customer.getCustomerId());
		customerServiceMapper.mapCustomerToCustomerEntity(customer, customerEntity);
		CustomerEntity customerEntitySaved = customerJpaRepository.save(customerEntity);
		return customerServiceMapper.mapCustomerEntityToCustomer(customerEntitySaved);
	}

	@Override
	public void delete(Integer customerId) {
		customerJpaRepository.delete(customerId);
	}

	public CustomerJpaRepository getCustomerJpaRepository() {
		return customerJpaRepository;
	}

	public void setCustomerJpaRepository(CustomerJpaRepository customerJpaRepository) {
		this.customerJpaRepository = customerJpaRepository;
	}

	public CustomerServiceMapper getCustomerServiceMapper() {
		return customerServiceMapper;
	}

	public void setCustomerServiceMapper(CustomerServiceMapper customerServiceMapper) {
		this.customerServiceMapper = customerServiceMapper;
	}

}
